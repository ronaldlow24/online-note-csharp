
@await Html.PartialAsync("~/Views/Shared/_Nav.cshtml")

<div class="container">

    <br />
    <div class="text-center">
        <button class="btn btn-outline-primary w-50" type="button" id="configureEmailButton">CONFIGURE EMAIL</button>
        <br />
        <small><i>Current Email : </i></small><stong>@ViewBag.Email</stong>
    </div>

    <br />
    <div class="text-center">
        <button class="btn btn-outline-success w-50" type="button" id="addReminderButton">ADD REMINDER +</button>
    </div>
    <br />

    <div class="row mt-3">
        <div class="col"></div>
        <div class="col-10 d-flex">
            <input
                type="search"
                id="searchInput"
                class="form-control"
                placeholder="Search Reminder Here..."
            />
        </div>
        <div class="col"></div>
    </div>

    <div id="todayReminderDIV">
        <div class="row mt-5 p-3">
            <div class="col-12 d-flex flex-column justify-content-center align-items-center"><h4><i>Today</i></h4></div>
        </div>


    </div>

     <div id="otherReminderDIV">
        <div class="row mt-5 p-3">
            <div class="col-12 d-flex flex-column justify-content-center align-items-center"><h4><i>Future</i></h4></div>
        </div>


    </div>

</div>

<!-- Modal -->
<div class="modal fade"
     id="exampleModal"
     tabindex="-1"
     aria-labelledby="exampleModalLabel"
     aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">
                    Add A Reminder (<span id="timezone"></span> Timezone)
                </h1>
                <button type="button"
                        class="btn-close"
                        data-bs-dismiss="modal"
                        aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="ReminderForm">
                    <div class="container-fluid">
                        <div class="row m-3">
                            <div class="col text-center">
                                <strong class="fs-4">Title</strong>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col">
                                <input id="reminderTitle"
                                       class="form-control"
                                       placeholder="Enter reminder title here..."
                                       required />
                            </div>
                        </div>
                        <div class="row m-3">
                            <div class="col text-center">
                                <strong class="fs-4">Method</strong>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-6 d-flex flex-column gap-2 align-items-center border-end border-dark">
                                <h5 class="fst-italic">Timer</h5>

                                <div>
                                    Hours
                                    <input type="number"
                                           class="form-control"
                                           value="0"
                                           id="timerHourInput"
                                           required />
                                </div>

                                <div>
                                    Minutes
                                    <input type="number"
                                           class="form-control"
                                           value="0"
                                           id="timerMinuteInput"
                                           required />
                                </div>

                                <button type="button"
                                        class="btn btn-primary mt-auto"
                                        id="saveReminderButtonTimer">
                                    Save
                                </button>
                            </div>
                            <div class="col-6 d-flex flex-column gap-2 align-items-center border-start border-dark">
                                <h5 class="fst-italic">Datetime</h5>

                                <div>
                                    Choose a date and time
                                    <input type="datetime-local"
                                           class="form-control"
                                           id="datetimeInput"
                                           required />
                                </div>

                                <button type="button"
                                        class="btn btn-primary mt-auto"
                                        id="saveReminderButtonDatetime">
                                    Save
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-secondary"
                        data-bs-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        $("#timezone").html(Intl.DateTimeFormat().resolvedOptions().timeZone)

        $("#addReminderButton").click(function () {
            $("#exampleModal").modal("show");
        });

        let lastSetTimeoutId = null;

        async function GetAllReminderAndRenderAndStartLoop() {
            try{
                const response = await fetch('@Url.Action("GetAllReminder", "Home")')
                const returnData = await response.json();

                $("[data-title]").remove()

                for (let i = 0; i < returnData.length; i++) {
                    AddRowToReminderDIVCore(returnData[i].id, returnData[i].title, moment.utc(returnData[i].targetDatetime))
                }

                lastSetTimeoutId = window.setTimeout(GetAllReminderAndRenderAndStartLoop, 5000);

            }
            catch(e){
                toastr.error(
                    "Failed to get reminder.",
                    "Operation Failed!"
                );
            }
        }

        (async function () {
            $("#spinner-div").css('display', 'flex');

            await GetAllReminderAndRenderAndStartLoop();

            $("#spinner-div").hide();
        })();


        async function InsertReminderToDB(title, moment_datetime) {
            try{
                $("#spinner-div").css('display', 'flex');

                const reminder = {
                    Title: title.trim(),
                    TargetDatetime: moment_datetime.utc().toISOString(),
                    TimezoneId: Intl.DateTimeFormat().resolvedOptions().timeZone
                }
                const response = await fetch('@Url.Action("PostReminder", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(reminder)
                })

                const returnData = await response.json();

                return returnData;
            }
            catch(e){
                console.error(e)
                toastr.error(
                    "Failed to insert reminder to db.",
                    "Operation Failed!"
                );
            }
            finally{
                $("#spinner-div").hide();
            }
        }

        function ProcessInsertReminderToDBResult(insertResult) {
            if (!insertResult.result) {
                toastr.error(
                    insertResult.customData,
                    "Operation Failed!"
                );
                return;
            }

            AddRowToReminderDIVCore(
                insertResult.data.id,
                insertResult.data.title,
                moment.utc(insertResult.data.targetDatetime)
            );

            $("#ReminderForm").trigger("reset");
            $("#exampleModal").modal("hide");
        }

        function AddRowToReminderDIVCore(id, title, moment_datetime) {
            const IsToday = moment_datetime.local().isSame(moment(), 'day');

            let datetime = ''
            let targetDIV = ''

            if (IsToday){
                datetime = `<h4>${moment_datetime.local().format("hh:mm:ss A")}</h4>`
                targetDIV = 'todayReminderDIV'
            }
            else{
                datetime = moment_datetime.local().format("DD MMMM YYYY hh:mm:ss A")
                targetDIV = 'otherReminderDIV'
            }

            let tempHTML = `
                <div class="row mt-3 p-3 border border-dark" data-title="${title.trim().toUpperCase()}" data-targetdatetime="${moment_datetime.valueOf()}">
                    <div class="col-7 d-flex flex-column justify-content-center align-items-center"><h4>${title}</h4><span><strong>${datetime}</strong></span></div>
                    <div class="col-5 d-flex justify-content-center align-items-center gap-3">
                        <button type="button" class="btn btn-outline-danger btn-delete" data-reminder-id="${id}"><i class="fa fa-trash" aria-hidden="true"></i></button>
                    </div>
                </div>
            `;

            const reminderList = $(`#${targetDIV} [data-targetdatetime]`)

            if(reminderList.length === 0)
                $(`#${targetDIV}`).append(tempHTML);
            else{
                for (let i = 0; i < reminderList.length; i++) {
                    if (parseInt(reminderList.eq(i).attr("data-targetdatetime")) >= moment_datetime.valueOf()) {
                        reminderList.eq(i).before(tempHTML);
                        break;
                    }

                    if(i == (reminderList.length - 1))
                        $(`#${targetDIV}`).append(tempHTML);
                }
            }

        }

     

        const ValidateTitleInput = () => {
            const result =
                $("#reminderTitle").val() &&
                $("#reminderTitle").val().trim() != "";
            if (!result) {
                toastr.error("Title is missing.", "Error!");
                $("#reminderTitle").focus();
            }
            return result;
        };

        $('input[Type="Number"]').keypress(function (e) {
            if ("0123456789".indexOf(e.key) != -1) {
            } else {
                e.preventDefault();
            }
        });

        $(document).on(
            "click",
            "#saveReminderButtonTimer",
            async function (event) {
                try{
                    event.preventDefault();

                    if (!ValidateTitleInput()) return;

                    const titleInput = $("#reminderTitle").val();
                    const hourInput = $("#timerHourInput").val();
                    const minuteInput = $("#timerMinuteInput").val();

                    if (hourInput == "") {
                        toastr.error("Hour is missing.", "Error!");
                        $("#timerHourInput").focus();
                        return;
                    }

                    if (minuteInput == "") {
                        toastr.error("Minute is missing.", "Error!");
                        $("#timerMinuteInput").focus();
                        return;
                    }

                    const hour = parseInt(hourInput);
                    const minute = parseInt(minuteInput);

                    if (
                        hour < 0 ||
                        minute < 0 ||
                        (hour === 0 && minute === 0)
                    ) {
                        toastr.error(
                            "Hour/Minute must be more than 0.",
                            "Error!"
                        );
                        return;
                    }

                    const targetDatetime = moment()
                        .add(hour, "h")
                        .add(minute, "m");

                    const insertResult = await InsertReminderToDB(
                        titleInput,
                        targetDatetime
                    );

                    ProcessInsertReminderToDBResult(insertResult)
                }
                catch(e){
                    console.error(e)
                    toastr.error(
                        "Failed to insert reminder.",
                        "Operation Failed!"
                    );
                }
            }
        );

        $(document).on(
            "click",
            "#saveReminderButtonDatetime",
            async function (event) {
                try{
                    event.preventDefault();

                    if (!ValidateTitleInput()) return;

                    const titleInput = $("#reminderTitle").val();
                    const input = $("#datetimeInput").val();

                    if (!input) {
                        toastr.error("Datetime is missing.", "Error!");
                        $("#datetimeInput").focus();
                        return;
                    }

                    if (new Date(input) <= new Date()) {
                        toastr.error("Datetime must be in future.", "Error!");
                        $("#datetimeInput").focus();
                        return;
                    }

                    const insertResult = await InsertReminderToDB(
                        titleInput,
                        moment(new Date(input))
                    );

                    ProcessInsertReminderToDBResult(insertResult)
                }
                catch (e) {
                    console.error(e)
                    toastr.error(
                        "Failed to insert reminder.",
                        "Operation Failed!"
                    );
                }
            }
        );


        $(document).on("click", ".btn-delete", async function () {
            try {
                $("#spinner-div").css('display', 'flex');

                const reminderId = $(this).attr("data-reminder-id");

                await fetch(`@Url.Action("DeleteReminder", "Home")/${reminderId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                })

                $(this).closest("[data-title]").remove()

            } 
            catch (e) {
                console.error(e)
                toastr.error(
                    "Failed to delete reminder.",
                    "Operation Failed!"
                );
            }
            finally {
                $("#spinner-div").hide();
            }
        });

        $("#searchInput").on("input", function () {
            try{
                const term = $(this).val().trim().toUpperCase()
                $("[data-title]").hide()

                if (term == "")
                    $("[data-title]").show()
                else
                    $(`[data-title^="${term}"]`).show()
            } catch (e) {
                console.error(e)
                toastr.error(
                    "Failed to search for reminder.",
                    "Operation Failed!"
                );
            }
            
        })


    </script>
}