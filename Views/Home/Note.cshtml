@model OnlineNote.Models.Note


<style>

    #connectionNumberDiv {
        position: fixed;
        bottom: 20px;
        left: 30px;
        z-index: 99;
        font-size: 14px;
        border: 2px solid black;
        background-color: white;
        color: black;
        padding: 15px;
        border-radius: 4px;
    }

</style>
@await Html.PartialAsync("~/Views/Shared/_Nav.cshtml")

<div class="container">
    <br />
    <input type="text" placeholder="Title" class="form-control" id="title" value="@Model.Title" />
    <br />
    <div id="content" style="min-height:65vh;"></div>
    <br />
    <br />
    <br />

</div>

<div id="connectionNumberDiv">Number Of Connection : <span id="connectionNumberSpan">Loading...</span></div>


@section Scripts {
    <script>
        const noteId = @Model.Id;

        const TOOLBAR_OPTIONS = [
            [{ header: [1, 2, 3, 4, 5, 6, false] }],
            [{ font: [] }],
            [{ list: "ordered" }, { list: "bullet" }],
            ["bold", "italic", "underline"],
            [{ color: [] }, { background: [] }],
            [{ script: "sub" }, { script: "super" }],
            [{ align: [] }],
            ["image", "blockquote", "code-block"],
            ["clean"],
        ]
        const quill = new Quill('#content', {
            placeholder: 'Enter content here...',
            theme: 'snow',
            modules: { toolbar: TOOLBAR_OPTIONS },
        });

        quill.setContents(JSON.parse(`@Html.Raw(ViewBag.Content)`.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t")))

        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/noteHub")
            .build();

        connection.on("RenderTitle", function (data) {
            $("#title").val(data)
        });

        connection.on("RenderConnectionNumber", function (data) {
            $("#connectionNumberSpan").html(data)
        });

        connection.on("RenderContent", function (data) {
            console.log(data)
            const updatedDeltaArray = JSON.parse(data)
            for (let i = 0; i < updatedDeltaArray.length; i++) {
                quill.updateContents(updatedDeltaArray[i])
            }
        });

        (async () => {
            try {
                await connection.start();
                await connection.invoke("AddToGroup", noteId);
            }
            catch (e) {
                console.error(e.toString());
            }
        })();

        let timeoutTitle;
        function debounceTitle(callback, limit) {
            return () => {
                clearTimeout(timeoutTitle);
                timeoutTitle = setTimeout(() => {
                    callback();
                }, limit);
            };
        }

        let timeoutContent;
        let updatedContentArray = []
        function debounceContent(callback, limit, para) {
            return () => {
                clearTimeout(timeoutContent);
                updatedContentArray.push(para)
                timeoutContent = setTimeout(() => {
                    callback(updatedContentArray);
                    updatedContentArray = []
                }, limit);
            };
        }

        async function saveTitle() {
            try {
                console.log("saving title...")
                const accountId = @ViewBag.AccountId;
                const title = $("#title").val()

                $("#float-loading").css('display', 'block');

                await connection.invoke('SaveTitle', noteId, title)

                $("#float-loading").css('display', 'none');
            }
            catch (ex) {
                console.error(ex)
                alert("ERROR")
            }
        }

        async function saveContent(updatedContentArray) {
            try {
                console.log("saving content...")
                const accountId = @ViewBag.AccountId;
                const content = JSON.stringify(quill.getContents());
                const updatedContentArrayString = JSON.stringify(updatedContentArray)
                $("#float-loading").css('display', 'block');
                await connection.invoke('SaveContent', noteId, content, updatedContentArrayString)

                $("#float-loading").css('display', 'none');
            }
            catch(ex) {
                console.error(ex)
                alert("ERROR")
            }
        }

        $("#title").on("input", async function (event) {
            debounceTitle(saveTitle, 500)()
        });

        quill.on('text-change', async function(delta, oldDelta, source) {
            if (source !== "user") return
            debounceContent(saveContent, 300, delta)()
        });

        setInterval(async function () {
            await connection.invoke('GetConnectionNumber', noteId)
        }, 1000);


    </script>
}