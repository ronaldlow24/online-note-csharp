@model OnlineNote.Models.Note

@await Html.PartialAsync("~/Views/Shared/_Nav.cshtml")

<div class="container">
    <br />
    <input type="text" placeholder="Title" class="form-control" id="title" value="@Model.Title" />
    <br />
    <div id="content" style="min-height:65vh;"></div>
    <br />
    <br />
    <br />

</div>


@section Scripts {
    <script>
        const TOOLBAR_OPTIONS = [
            [{ header: [1, 2, 3, 4, 5, 6, false] }],
            [{ font: [] }],
            [{ list: "ordered" }, { list: "bullet" }],
            ["bold", "italic", "underline"],
            [{ color: [] }, { background: [] }],
            [{ script: "sub" }, { script: "super" }],
            [{ align: [] }],
            ["image", "blockquote", "code-block"],
            ["clean"],
        ]
        const quill = new Quill('#content', {
            placeholder: 'Enter content here...',
            theme: 'snow',
            modules: { toolbar: TOOLBAR_OPTIONS },
        });
        quill.setContents(JSON.parse(`@Html.Raw(ViewBag.Content)`.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t")))

        const noteId = @Model.Id;

        function isOpen(ws) { return ws.readyState === ws.OPEN }

        const socket = new WebSocket(`wss://${window.location.host}@Url.Action("NoteWS", "Home")`);

        socket.addEventListener('message', function (event) {
            const data = JSON.parse(event.data)
            const content = JSON.parse(data.Content)
            
            if(data.Action == "RenderTitle")
                $("#title").val(content.Title)

            if (data.Action == "RenderContent")
                quill.updateContents(JSON.parse(content.UpdatedContent))
        });

        let timeoutTitle;
        function debounceTitle(callback, limit) {
            return () => {
                clearTimeout(timeoutTitle);
                timeoutTitle = setTimeout(() => {
                    callback();
                }, limit);
            };
        }

        let timeoutContent;
        function debounceContent(callback, limit, para) {
            return () => {
                clearTimeout(timeoutContent);
                timeoutContent = setTimeout(() => {
                    callback(para);
                }, limit);
            };
        }

        function saveTitle() {
            try {
                console.log("saving title...")
                const accountId = @ViewBag.AccountId;
                const title = $("#title").val()

                $("#float-loading").css('display', 'block');

                const data = { Id: noteId, Title: title, AccountId: accountId }
                const socketData = { Action: "SaveTitle", Content: JSON.stringify(data) }

                if (!isOpen(socket)) {
                    alert("WEB SOCKET ERROR , PLEASE REFRESH");
                    return;
                }

                socket.send(JSON.stringify(socketData))

                $("#float-loading").css('display', 'none');
            }
            catch (ex) {
                console.error(ex)
                alert("ERROR")
            }
        }

        function saveContent(delta) {
            try {
                console.log("saving content...")
                const accountId = @ViewBag.AccountId;
                const content = JSON.stringify(quill.getContents());

                $("#float-loading").css('display', 'block');

                const data = { Id: noteId, Content: content, UpdatedContent: JSON.stringify(delta), AccountId: accountId }
                const socketData = { Action: "SaveContent", Content: JSON.stringify(data) }

                if (!isOpen(socket)) {
                    alert("WEB SOCKET ERROR , PLEASE REFRESH");
                    return;
                }

                socket.send(JSON.stringify(socketData))

                $("#float-loading").css('display', 'none');
            }
            catch(ex) {
                console.error(ex)
                alert("ERROR")
            }
        }

        $("#title").on("input", async function (event) {
            debounceTitle(saveTitle, 1000)()
        });

        quill.on('text-change', function(delta, oldDelta, source) {
            if (source !== "user") return
            debounceContent(saveContent, 600, delta)()
        });

    </script>
}