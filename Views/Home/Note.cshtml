@model OnlineNote.Models.Note

@await Html.PartialAsync("~/Views/Shared/_Nav.cshtml")

<div class="container">
    <br />
    <input type="text" placeholder="Title" class="form-control" id="title" value="@Model.Title" />
    <br />
    <textarea type="text" placeholder="Content" class="form-control" id="content" style="min-height:65vh;">@Model.Content</textarea>
    <br />
    <br />
    <br />

</div>


@section Scripts {
    <script>
        const SAVE_INTERVAL_MS = 2000
        const TOOLBAR_OPTIONS = [
            [{ header: [1, 2, 3, 4, 5, 6, false] }],
            [{ font: [] }],
            [{ list: "ordered" }, { list: "bullet" }],
            ["bold", "italic", "underline"],
            [{ color: [] }, { background: [] }],
            [{ script: "sub" }, { script: "super" }],
            [{ align: [] }],
            ["image", "blockquote", "code-block"],
            ["clean"],
        ]


        const quill = new Quill('#content', {
            placeholder: 'Enter content here...',
            theme: 'snow',
            modules: { toolbar: TOOLBAR_OPTIONS },
        });

        const noteId = @Model.Id;
        let noteContentRef = `@Model.Content`

        const socket = new WebSocket(`wss://${window.location.host}@Url.Action("NoteWS", "Home")`);

        socket.addEventListener('open', function (event) {

            const socketData = { Action: "Load", Content: noteId }

            setInterval(function () {
                socket.send(JSON.stringify(socketData))
            }, 2000);
        });

        socket.addEventListener('message', function (event) {
            console.log(event)
            //const data = JSON.parse(event.data)


            //$("#title").val(data.Title)
            //quill.setContents(data.Content)
            //noteContentRef = data.Content
        });

        function debounce(callback, limit) {
            console.log(limit)
            let timeout;
            return () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    callback();
                }, limit);
            };
        }

        async function saveNote() {
            try {
                const accountId = @ViewBag.AccountId
                const title = $("#title").val()
                const content = quill.getContents();

                if (content == noteContentRef)
                    return

                $("#float-loading").css('display', 'block');

                const data = { Id: noteId, Title: title, Content: content, AccountId: accountId }

                const socketData = { Action: "Save", Content: data }
                socket.send(socketData)

                //const response = await fetch('@Url.Action("PostNote", "Home")', {
                //    method: 'POST',
                //    headers: {
                //        'Content-Type': 'application/json'
                //    },
                //    body: JSON.stringify(data)
                //})

                $("#float-loading").css('display', 'none');
            }
            catch(ex) {
                console.error(ex)
                alert("ERROR")
            }
        }

        const debouncedKeyPress = debounce(saveNote, 300);

        $("#title").on("input", async function (event) {
            debouncedKeyPress()
        });

        quill.on('text-change', function(delta, oldDelta, source) {
            if (source !== "user") return
            debouncedKeyPress()
        });

    </script>
}